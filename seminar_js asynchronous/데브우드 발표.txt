자바스크립트 비동기 처리할 때 promise / async / await

1. 자바스크립트가 뭐하는 언어인지
2. 비동기 처리란 뭔지
순서대로 코드를 처리하는 기존 방식의 문제점 : 3명의 정보를 받아오는 데 3초가 걸린다
기다리게 하면 1초만에 3명의 정보를 받아올 수 있다! = 비동기 방식
setTimeout(인자로 들어온 콜백 함수를 예약하고 바로 return한다 / 인자 : 콜백 함수, 기다릴 밀리초, 콜백 함수에 넣을 인자) : 3-2-1 순서로 (달리기 그림 첨부)
비동기 작업의 단위를 promise라고 한다!

3. promise가 뭔지
promise 객체를 선언 (resolve와 reject 인자) - 포인터 함수(executor)에 적힌 비동기 작업 실행 - 성공하면 resolve(=then), 실패하면 reject(=catch) 소환)
매번 promise 객체를 new로 선언하기보다는 new promise~를 return하는 함수를 만들자! : 재사용하기 코드 첨부, promise 순서도 그림 첨부

4. async
async는 promise를 이용하는 더 쉬운 방법 : asynce 함수의 return값은 promise 객체이다 : 코드 첨부

5. await
await는 promise가 끝날 때까지 기다리는 함수 (async에서만 사용할 수 있음)
고기잡이 배 비유 첨부
동기 환경에서는 비동기 작업을 기다리는 게 의미가 없다 : 고기잡이 배를 항구에서 애타게 기다리고 있을 필요는 없다는 말
비동기 환경에서는 비동기 작업을 기다리는 게 의미가 있다 : 생일을 알아야 생일 파티를 해줄 수 있기 때문 ( 생일을 알기 전에 파티 준비를 하는 건 의미가 없다!)
비동기 환경에서 비동기 작업의 결과를 기다리는 걸 위해서 await를 사용하는 것이다

promise.all : 여러 비동기 동작을 한번에 기다리기 : 정보를 받아올 때마다 await를 쓰면 오래 걸린다!
받아오는 것들은 전부 비동기 작업으로 빠르게 처리하고 , 모두 끝날 때까지 기다렸다가 전부 성공하면 평균을 계산하는 함수를 부르자!

결론 : 비동기 함수를 잘 써먹자 happy codingwk